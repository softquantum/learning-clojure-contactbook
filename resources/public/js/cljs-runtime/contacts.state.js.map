{"version":3,"sources":["contacts/state.cljs"],"mappings":"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","names":["contacts.state/initial-state","contacts.state/app-state","helix.core/create-context","js/contacts","js/contacts.state","js/contacts.state.app-reducer","method-table__4712__auto__","cljs.core.atom","prefer-table__4713__auto__","method-cache__4714__auto__","cached-hierarchy__4715__auto__","hierarchy__4716__auto__","cljs.core.get","fexpr__33385","cljs.core/MultiFn","cljs.core.symbol","contacts.state/app-reducer","_","action","cljs.core/first","p__33386","vec__33387","cljs.core.nth","state","payload","cljs.core.assoc","p__33390","vec__33391","p__33395","vec__33396","p1__33394#","prev","update-contact","cljs.core._EQ_","next","cljs.core.map","p__33399","vec__33400","cljs.core.conj","p__33404","vec__33405","p1__33403#","not-matching","cljs.core.filter","contacts.state/use-app-state","vec__33412","p1__33408#","p1__33409#","p1__33410#","p1__33411#","dispatch","helix.hooks/use-context","response","G__33415","G__33416","G__33417","G__33418","G__33419","G__33420","G__33421"],"sourcesContent":["(ns contacts.state\n   (:require [helix.core :refer [create-context]]\n             [helix.hooks :as hooks]))\n\n(def initial-state {:selected nil\n                    :contacts []})\n\n(def app-state (create-context nil))\n\n;(defn app-reducer [state [action-type action-payload]]\n;   ;(case action-type...)\n;   ;usually in a switch case but here we are going to use multi-methods\n;   state)\n\n(defmulti app-reducer\n          (fn [_ action]\n             (first action)))\n\n(defmethod app-reducer\n   ::set-contacts [state [_ payload]]\n   (assoc state :contacts payload))\n\n(defmethod app-reducer\n   ::set-selected [state [_ payload]]\n   (assoc state :selected payload))\n\n(defmethod app-reducer\n   ::update-contact [state [_ payload]]\n   (let [prev (:contacts state)\n         update-contact #(if (= (:id %) (:id payload))\n                            payload\n                            %)\n         next (map update-contact prev)]\n      (assoc state :contacts next)))\n\n(defmethod app-reducer\n   ::add-contact [state [_ payload]]\n   ;(assoc state :contacts (conj (:contacts state) payload)))\n   (let [prev (:contacts state)\n         next (conj prev payload)]\n      (assoc state :contacts next)))\n\n(defmethod app-reducer\n   ::remove-contact [state [_ payload]]\n   (let [prev (:contacts state)\n         not-matching #(not (= (:id %) (:id payload)))\n         next (filter not-matching prev)]\n      (assoc state :contacts next)))\n\n;(comment\n;   (app-reducer initial-state [:set-contacts [{:data 1}\n;                                              {:data 2}]])\n;   (app-reducer {:selected nil\n;                 :contacts [{:id 1\n;                             :value \"Kelvin\"}\n;                            {:id 2\n;                             :value \"Andrea\"}]}\n;                [::update-contact {:id 1\n;                                   :value \"Kelvin Updated\"}]))\n\n;custom hook\n(defn use-app-state []\n   (let [[state dispatch] (hooks/use-context app-state)]\n      [state {:init (fn [response]\n                       (dispatch [::set-contacts response])\n                       (dispatch [::set-selected (first response)]))\n              :select #(dispatch [::set-selected %])\n              :new-contact #(dispatch [::set-selected nil])\n              :add-contact #(dispatch [::add-contact %])\n              :update-contact #(dispatch [::update-contact %])\n              :remove-contact #(dispatch [::remove-contact %])}]))\n\n"]}