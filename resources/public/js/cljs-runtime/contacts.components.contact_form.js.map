{"version":3,"sources":["contacts/components/contact_form.cljs"],"mappings":"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","names":["G__33424","props__26563__auto__","maybe-ref__26564__auto__","vec__33425","helix.core/extract-cljs-props","map__33428","cljs.core.nth","cljs.core/--destructure-map","cljs.core.get","goog/DEBUG","G__33429","goog.object/set","contacts.components.contact-form/contact-display-item","label","value","contacts.utils/make-label-str","G__33433","vec__33434","map__33437","G__33447","contacts.components.contact-form/contact-display","contact","cljs.core.map_indexed","i","v","cljs.core.keyword","contacts.utils/contact-form-fields","G__33451","vec__33455","map__33458","G__33471","contacts.components.contact-form/contact-edit-item","on-change","G__33476","vec__33477","map__33480","G__33487","contacts.components.contact-form/contact-edit","vec__33481","state","set-state","helix.hooks/use-state","G__33486","cljs.core.assoc","p1__33473#","helix.core/get-react","obj33443","obj33485","obj33505","obj33507","G__33490","vec__33491","map__33494","G__33508","contacts.components.contact-form/contact-form","vec__33495","vec__33498","edit","set-edit","actions","contacts.state/use-app-state","G__33503","cljs.core/not","helix.core/Fragment","obj33466","obj33468","helix.impl.props/or-undefined","obj33502"],"sourcesContent":["(ns contacts.components.contact-form\n   (:require [helix.core :refer [defnc <> $]]\n             [helix.hooks :as hooks]\n             [helix.dom :as d]\n             [contacts.state :refer [use-app-state]]\n             [contacts.utils :refer [make-label-str\n                                     contact-form-fields\n                                     api-host]]))\n\n(defnc contact-display-item [{:keys [label value]}]\n   (d/p\n      (d/strong\n         (make-label-str label))\n      value))\n\n(defnc contact-display [{:keys [contact]}]\n   (<>\n      (map-indexed\n         (fn [i v]\n            ($ contact-display-item {:label v\n                                     :value (get contact (keyword v))\n                                     :key i}))\n         contact-form-fields)))\n\n(defnc contact-edit-item [{:keys [label value on-change]}]\n   (d/div\n      (d/label {:for label\n                :class '[font-bold]}\n               (make-label-str label))\n      (d/input {:id label\n                :class '[shadow border rounded w-full py-2 px-3 mb-3]\n                :value value\n                :on-change on-change})))\n\n(defnc contact-edit [{:keys [contact]}]\n   (let [[state set-state] (hooks/use-state contact)]\n       (d/form\n          (map-indexed\n             (fn [i v]\n                ($ contact-edit-item {:label v\n                                      :value (get state (keyword v))\n                                      :key i\n                                      :on-change #(set-state\n                                                     (assoc state (keyword v)\n                                                                  (.. %\n                                                                      -target\n                                                                      -value)))}))\n             contact-form-fields))))\n\n(defnc contact-form [{:keys [contact]}]\n   (let [[edit set-edit] (hooks/use-state false)\n         [state actions] (use-app-state)\n         contact (:selected state)]\n    (d/div\n       (d/h1 \"Contact Form\")\n       (d/button {:on-click #(set-edit (not edit))}\n                 \"toggle\")\n       (if edit\n          ($ contact-edit {:contact contact})\n          ($ contact-display {:contact contact})))))"]}