{"version":3,"sources":["contacts/components/contact_form.cljs"],"mappings":"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","names":["G__36061","props__26563__auto__","maybe-ref__26564__auto__","vec__36062","helix.core/extract-cljs-props","map__36065","cljs.core.nth","cljs.core/--destructure-map","cljs.core.get","goog/DEBUG","G__36066","goog.object/set","contacts.components.contact-form/contact-display-item","label","value","contacts.utils/make-label-str","G__36069","vec__36070","map__36073","G__36076","contacts.components.contact-form/contact-display","contact","cljs.core.map_indexed","i","v","cljs.core.keyword","contacts.utils/contact-form-fields","G__36079","vec__36080","map__36083","G__36088","contacts.components.contact-form/contact-edit-item","on-change","G__36092","vec__36093","map__36096","G__36115","contacts.components.contact-form/contact-edit","vec__36097","vec__36100","map__36103","state","set-state","helix.hooks/use-state","app-state","actions","contacts.state/use-app-state","selected","add-contact","update-contact","e","ajax.core.PUT","contacts.utils/api-host","map__36106","first_name","last_name","email","helix.core/get-react","obj36075","obj36111","p1__36089#","obj36138","obj36140","response","G__36107","cljs.core/first","ajax.core.POST","map__36108","helix.core/Fragment","G__36109","G__36112","cljs.core.assoc","G__36118","vec__36119","G__36141","contacts.components.contact-form/contact-form","vec__36122","vec__36125","edit","set-edit","new-contact","cljs.core/not","G__36136","obj36085","obj36087","helix.impl.props/or-undefined","obj36105","obj36114","obj36131","obj36133","obj36135","G__36128","helix.hooks/wrap-fx","G__36129","helix.hooks/raw-use-effect"],"sourcesContent":["(ns contacts.components.contact-form\n   (:require [ajax.core :refer [PUT POST]]\n             [helix.core :refer [defnc <> $]]\n             [helix.hooks :as hooks]\n             [helix.dom :as d]\n             [contacts.state :refer [use-app-state]]\n             [contacts.utils :refer [make-label-str\n                                     contact-form-fields\n                                     api-host]]))\n\n(defnc contact-display-item [{:keys [label value]}]\n   (d/p\n      (d/strong\n         (make-label-str label))\n      value))\n\n(defnc contact-display [{:keys [contact]}]\n   (<>\n      (map-indexed\n         (fn [i v]\n            ($ contact-display-item {:label v\n                                     :value (get contact (keyword v))\n                                     :key i}))\n         contact-form-fields)))\n\n(defnc contact-edit-item [{:keys [label value on-change]}]\n   (d/div\n      (d/label {:for label\n                :class '[font-bold]}\n               (make-label-str label))\n      (d/input {:id label\n                :class '[shadow border rounded w-full py-2 px-3 mb-3]\n                :value value\n                :on-change on-change})))\n\n(defnc contact-edit [{:keys [contact]}]\n  (let [[state set-state] (hooks/use-state contact)\n        [app-state actions] (use-app-state)\n        selected (:selected app-state)\n        {:keys [add-contact update-contact]} actions]\n    (d/form {:on-submit (fn [e]\n                          (.preventDefault e)\n                          (if selected\n                            (PUT (str api-host \"/contacts/\" (:id selected))\n                              (let [{:keys [first_name last_name email]} state]\n                                {:params {:first-name first_name\n                                          :last-name last_name\n                                          :email email}\n                                 :format :json\n                                 :handler (fn [response]\n                                            (update-contact (first (:contact response))))}))\n                            (POST (str api-host \"/contacts\")\n                              (let [{:keys [first_name last_name email]} state]\n                                {:params {:first-name first_name\n                                          :last-name last_name\n                                          :email email}\n                                 :format :json\n                                 :handler (fn [response]\n                                            (add-contact (first response)))}))))}\n            (map-indexed\n             (fn [i v]\n               ($ contact-edit-item {:label v\n                                     :value (get state (keyword v))\n                                     :key i\n                                     :on-change #(set-state\n                                                  (assoc state\n                                                         (keyword v)\n                                                         (.. %\n                                                             -target\n                                                             -value)))}))\n             contact-form-fields)\n            (d/button {:type \"submit\"\n                       :class '[bg-green-500 py-2 px-4 w-full text-white]}\n                      \"Submit\"))))\n\n(defnc contact-form []\n   (let [[edit set-edit] (hooks/use-state false)\n         [state actions] (use-app-state)\n         selected (:selected state)\n         new-contact (:new-contact actions)]\n      (hooks/use-effect\n        [selected]\n        (if (not selected)\n            (set-edit true)\n            (set-edit false)))\n      (d/div\n         (d/div {:class '[mb-2 flex]}\n            (d/button {:class '[bg-green-500 py-1 px-4 rounded text-white]\n                       :on-click #(new-contact)}\n                      \"New contact\")\n            (when selected\n               (d/button {:class '[bg-green-500 ml-2 py-1 px-4 rounded text-white]\n                          :on-click #(set-edit (not edit))}\n                         (if edit\n                            \"Cancel\"\n                            \"Edit Contact\"))))\n         (if edit\n            ($ contact-edit {:contact selected})\n            ($ contact-display {:contact selected})))))"]}